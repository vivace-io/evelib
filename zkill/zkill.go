package zkill

import (
	"crypto/tls"
	"encoding/json"
	"io/ioutil"
	"net/http"
	"sync"

	"github.com/vivace-io/evelib/util"
)

const (
	DefaultAddress = "https://zkillboard.com/api"
)

// Client is a client to access zKillboard's API.
type Client struct {
	locker    *sync.RWMutex
	root      string
	ua        string
	tls       bool
	lock      *sync.RWMutex
	limiter   *util.Limiter
	webClient *http.Client
}

// NewClient returns a new API client. If the options passed are nil, it uses
// the options generated by DefaultOptions. For misconfiguration errors, returns
// nil for client and an error.
func NewClient(apiRoot, useragent string) (client *Client, err error) {
	client = &Client{
		locker: new(sync.RWMutex),
		root:   apiRoot,
		ua:     useragent,
		lock:   new(sync.RWMutex),
	}
	client.webClient = new(http.Client)
	// Error checking util.NewLimiter is redundant here, as ValidateOptions covers
	// any error that may be returned, so ignore the error.
	client.limiter, _ = util.NewLimiter(10, 10, 2)
	return
}

func (client *Client) DisableTLS() {
	client.webClient.Transport = &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
}

func (client *Client) fetch(path string, model interface{}) (err error) {
	// Wait for connection to proceed before anything else. Function waits now
	// rather than immediately prior to executing request to conserve resources
	// in more intensive applications.
	client.limiter.Connect()
	defer client.limiter.Disconnect()
	// Gain read lock (holds no importance as of yet but will in the near future)
	client.locker.RLock()
	defer client.locker.RUnlock()
	var request *http.Request
	request, err = http.NewRequest("GET", client.root+path, nil)
	if err != nil {
		return err
	}
	request.Header.Add("User-Agent", client.ua)
	var rawresp *http.Response
	rawresp, err = client.webClient.Do(request)
	if err != nil {
		return err
	}
	defer rawresp.Body.Close()
	var body []byte
	body, err = ioutil.ReadAll(rawresp.Body)
	if err != nil {
		return err
	}
	err = json.Unmarshal(body, &model)
	return err
}
